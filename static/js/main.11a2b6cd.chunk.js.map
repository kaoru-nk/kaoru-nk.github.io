{"version":3,"sources":["component/graphComponent.tsx","component/SerialComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphComponent","props","obj","i","data","yv","push","x","y","data2","datasets","label","backgroundColor","type","Scatter","options","animation","scales","yAxes","ticks","max","min","isTmpRecordEnable","recordedAryTmp","SerialCompornent","useState","value","setValue","isRecordEnable","setIsRecordEnable","recordedAry","setRecordedAry","a","navigator","serial","requestPort","port","open","baudRate","readable","reader","getReader","read","done","console","log","inputValue","TextDecoder","decode","addSerial","error","releaseLock","msg","msgNumber","parseInt","isNaN","tmpAry","date","Date","getTime","Button","variant","color","disabled","onClick","text","firstTime","time","blob","Blob","saveAs","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a2b6cd.chunk.js","sourcesContent":["import { Scatter } from 'react-chartjs-2';\n\nconst GraphComponent = (props:any) => {\n    let obj=[];\n    for(let i in props.data){\n        const yv=props.data[i][1];\n        if(yv<800&&yv>30) {\n            obj.push({\n                x: props.data[i][0],\n                y: yv\n            });\n        }\n    }\n    const data2 = {\n        datasets: [\n            {\n                label: 'A dataset',\n                data: obj,\n                backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n        ],\n    };\n\n    const options = {\n        animation: false,\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        max: 500,\n                        min:100\n                    },\n                },\n            ],\n        },\n    };\n    return (\n        <>\n            <Scatter type={Scatter} data={data2} options={options}/>\n        </>\n    );\n};\n\nexport default GraphComponent;","import React, {useState} from 'react';\nimport { saveAs } from 'file-saver';\nimport GraphComponent from \"./graphComponent\";\n//import Timeout = NodeJS.Timeout;\nimport { Button } from '@material-ui/core';\nlet isTmpRecordEnable:boolean=false;\nlet recordedAryTmp:number[][]=[];\nconst SerialCompornent = () =>{\n    const [value, setValue] = useState(0);\n    const [isRecordEnable,setIsRecordEnable] = useState(false);\n    const [recordedAry , setRecordedAry] = useState<number[][]>([]);\n    async function onSerialPortRecive(){\n        try {\n            let port:SerialPort = await navigator.serial.requestPort();\n            await port.open({ baudRate: 115200 });\n\n            while (port.readable) {\n                const reader:ReadableStreamReader<Uint8Array> = port.readable.getReader();\n\n                try {\n                    while (true) {\n                        const { value, done } = await reader.read();\n                        if (done) {\n                            console.log(\"Canceled\\n\");\n                            break;\n                        }\n                        const inputValue:string = new TextDecoder().decode(value);\n                        addSerial(inputValue);\n                    }\n                } catch (error) {\n                    console.error(\"Error: Read\" + error + \"\\n\");\n                } finally {\n                    reader.releaseLock();\n                }\n            }\n        } catch (error) {\n            console.error(\"Error: Open\" + error + \"\\n\");\n        }\n    }\n\n    const addSerial = (msg:string) => {\n        const msgNumber:number = parseInt(msg);\n        if(!isNaN(msgNumber)&&msg) {\n            //useSerialNumberState(msgNumber);\n            //console.log(msgNumber);\n            setValue(msgNumber);\n            //記録が開始されているなら\n            //console.log(isTmpRecordEnable);\n            if(isTmpRecordEnable){\n                let tmpAry:number[][] = recordedAry;\n                const date = new Date;\n                tmpAry.push([date.getTime(),msgNumber]);\n                recordedAryTmp.push([date.getTime(),msgNumber]);\n                setRecordedAry(tmpAry);\n            }\n        }\n    }\n    const recordEnable = () =>{\n        setIsRecordEnable(!isRecordEnable);\n        isTmpRecordEnable = !isTmpRecordEnable;\n        if(isTmpRecordEnable){\n            setRecordedAry([]);\n            //何故か数秒後にふっかつする\n            recordedAryTmp=[];\n        }\n        else{\n            //download\n            let text:string='';\n            const firstTime:number = recordedAryTmp[0][0];\n            for(let i in recordedAryTmp){\n                const time:number = (recordedAryTmp[i][0] - firstTime ) /1000;\n                text+=`${time},${recordedAryTmp[i][1]},\\r\\n`;\n            }\n            const blob = new Blob([text], {type: \"text/csv;charset=utf-8\"});\n            saveAs(blob, 'file.csv');\n        }\n        console.log(isRecordEnable)\n    }\n    return (\n        <div>\n            <Button variant=\"contained\" color=\"primary\" disabled={isRecordEnable} onClick={onSerialPortRecive}>接続</Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={recordEnable}>{isRecordEnable?\"記録停止\":\"記録開始\"}</Button>\n            <p>現在値：{value}</p>\n            <GraphComponent data={recordedAryTmp}></GraphComponent>\n        </div>\n\n    )\n}\n\nexport default SerialCompornent;","import React from 'react';\nimport './App.css';\nimport './component/SerialComponent'\nimport SerialCompornent from \"./component/SerialComponent\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>SerialSave for Web</h1>\n      </header>\n      <SerialCompornent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}